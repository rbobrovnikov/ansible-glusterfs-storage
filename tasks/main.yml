---

- name: Include OS-specific variables
  include_vars: "{{ ansible_os_family }}.yml"

- include: install-RedHat.yml
  when: ansible_os_family == 'RedHat'

- include: install-Debian.yml
  when: ansible_os_family == 'Debian'


- name: Ensure GlusterFS is started and enabled at boot
  service:
    name: "{{ glusterfs_storage_daemon }}"
    state: started
    enabled: yes


- name: Ensure Gluster brick and mount directories exist
  file:
    path: "{{ item }}"
    state: directory
  with_items:
    - "{{ glusterfs_storage_brick_dir }}"
    - "{{ glusterfs_storage_mount_dir }}"


- name: Check if Gluster volumes already exist
  shell: "gluster volume info"
  changed_when: false
  register: gluster_volume_info


- name: Connect to Gluster peers
  shell: "gluster peer probe {{ item }}"
  register: gluster_peer_probe
  changed_when: "'already in peer list' not in gluster_peer_probe.stdout"
  failed_when: false
  with_items: "{{ groups['glusterfs'] }}"
  when: "'Volume Name: {{ glusterfs_storage_volume }}' not in gluster_volume_info.stdout"


- name: Create Gluster volume
  shell: "gluster volume create {{ glusterfs_storage_volume }} {{ glusterfs_storage_brick_config }} force"
  register: gluster_volume_create
  changed_when: "'successful' in gluster_volume_create.stdout"
  when: "inventory_hostname == groups['glusterfs'][0] and 'Volume Name: {{ glusterfs_storage_volume }}' not in gluster_volume_info.stdout"


- name: Ensure Gluster volume is started
  shell: "gluster volume start {{ glusterfs_storage_volume }}"
  register: gluster_volume_start
  changed_when: "'successful' in gluster_volume_start.stdout"
  when: "inventory_hostname == groups['glusterfs'][0] and 'Volume Name: {{ glusterfs_storage_volume }}' not in gluster_volume_info.stdout"


- name: Ensure the Gluster volume is mounted
  mount:
    name: "{{ glusterfs_storage_mount_dir }}"
    src: "{{ groups['glusterfs'][0] }}:/{{ glusterfs_storage_volume }}"
    fstype: glusterfs
    opts: "defaults,_netdev"
    state: mounted
